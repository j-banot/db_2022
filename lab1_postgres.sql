create table PERSON
(
    PERSON_ID int generated by default as identity not null,
    FIRSTNAME varchar(50),
    LASTNAME  varchar(50),
    constraint PERSON_PK
        primary key (PERSON_ID)
);

create table TRIP
(
    TRIP_ID   int generated by default as identity not null,
    NAME      varchar(100),
    COUNTRY   varchar(50),
    TRIP_DATE date,
    NO_PLACES int,
    constraint TRIP_PK
        primary key (TRIP_ID)
);

create table RESERVATION
(
    RESERVATION_ID int generated by default as identity not null,
    TRIP_ID        int,
    PERSON_ID      int,
    STATUS         char(1),
    constraint RESERVATION_PK
        primary key (RESERVATION_ID)
);

create table COUNTRY
(
    COUNTRY_ID int generated by default as identity not null,
    NAME       varchar(50),
    constraint COUNTRY_PK
        primary key (COUNTRY_ID)
);

create table RESERVATION_LOG
(
    LOG_ID         int generated by default as identity not null,
    RESERVATION_ID int,
    CHANGE_DATE    date,
    STATUS         char,
    constraint RESERVATION_LOG_PK
        primary key (LOG_ID)
);

alter table TRIP
    add NO_AVAILABLE_PLACES int;

alter table RESERVATION
    add constraint RESERVATION_FK1
        foreign key (PERSON_ID)
            references PERSON (PERSON_ID);

alter table RESERVATION
    add constraint RESERVATION_FK2
        foreign key (TRIP_ID)
            references TRIP (TRIP_ID);

alter table RESERVATION_LOG
    add constraint RESERVATION_LOG_FK1
        foreign key (RESERVATION_ID)
            references RESERVATION (RESERVATION_ID);

alter table RESERVATION
    add constraint RESERVATION_CHK1
        check (STATUS in (
                          'N', 'P', 'C'
            ));

alter table TRIP
    add constraint TRIP_CHK1
        check (COUNTRY in (
                           'France', 'Spain', 'Germany', 'Poland'
            ));

alter table RESERVATION_LOG
    add constraint RESERVATION_LOG_CHK1
        check (STATUS in (
                          'N', 'P', 'C'
            ));

insert into COUNTRY (NAME)
values ('France');
insert into COUNTRY (NAME)
values ('Spain');
insert into COUNTRY (NAME)
values ('Germany');
insert into COUNTRY (NAME)
values ('Poland');

insert into PERSON (FIRSTNAME, LASTNAME)
values ('Adam',
        'Kowalski');
insert into PERSON (FIRSTNAME, LASTNAME)
values ('Jan',
        'Nowak');
insert into PERSON (FIRSTNAME, LASTNAME)
values ('Arleta',
        'Winnicka');
insert into PERSON (FIRSTNAME, LASTNAME)
values ('Julia',
        'Zawadzka');
insert into PERSON (FIRSTNAME, LASTNAME)
values ('Mariusz',
        'Kowalczyk');
insert into PERSON (FIRSTNAME, LASTNAME)
values ('Igor',
        'Brudny');
insert into PERSON (FIRSTNAME, LASTNAME)
values ('Filip',
        'Trochan');
insert into PERSON (FIRSTNAME, LASTNAME)
values ('Anna',
        'Borucka');
insert into PERSON (FIRSTNAME, LASTNAME)
values ('Cezary',
        'Czarnecki');
insert into PERSON (FIRSTNAME, LASTNAME)
values ('Oliwia',
        'Mickiewicz');

insert into TRIP (NAME, COUNTRY, TRIP_DATE, NO_PLACES)
values ('Trip to Paris',
        'France',
        to_date('2021-09-03', 'YYYY-MM-DD'),
        3);
insert into TRIP (NAME, COUNTRY, TRIP_DATE, NO_PLACES)
values ('Trip to Barcelona',
        'Spain',
        to_date('2022-12-04', 'YYYY-MM-DD'),
        2);
insert into TRIP (NAME, COUNTRY, TRIP_DATE, NO_PLACES)
values ('Trip to Berlin',
        'Germany',
        to_date('2023-02-02', 'YYYY-MM-DD'),
        1);
insert into TRIP (NAME, COUNTRY, TRIP_DATE, NO_PLACES)
values ('Trip to Cracow',
        'Poland',
        to_date('2022-10-05', 'YYYY-MM-DD'),
        2);

insert into RESERVATION (TRIP_ID, PERSON_ID, STATUS)
values (1,
        1,
        'N');
insert into RESERVATION (TRIP_ID, PERSON_ID, STATUS)
values (1,
        2,
        'P');
insert into RESERVATION (TRIP_ID, PERSON_ID, STATUS)
values (1,
        3,
        'C');
insert into RESERVATION (TRIP_ID, PERSON_ID, STATUS)
values (2,
        4,
        'C');
insert into RESERVATION (TRIP_ID, PERSON_ID, STATUS)
values (2,
        5,
        'N');
insert into RESERVATION (TRIP_ID, PERSON_ID, STATUS)
values (3,
        6,
        'P');
insert into RESERVATION (TRIP_ID, PERSON_ID, STATUS)
values (3,
        7,
        'C');
insert into RESERVATION (TRIP_ID, PERSON_ID, STATUS)
values (4,
        8,
        'N');
insert into RESERVATION (TRIP_ID, PERSON_ID, STATUS)
values (4,
        9,
        'N');
insert into RESERVATION (TRIP_ID, PERSON_ID, STATUS)
values (4,
        10,
        'C');

create or replace view V_RESERVATIONS
as
select C.NAME           as COUNTRY,
       T.TRIP_DATE      as TRIP_DATE,
       T.NAME           as TRIP_NAME,
       P.FIRSTNAME      as FIRSTNAME,
       P.LASTNAME       as LASTNAME,
       R.RESERVATION_ID as RESERVATION_ID,
       R.STATUS         as STATUS
from RESERVATION as R
         join TRIP as T
              on R.TRIP_ID = T.TRIP_ID
         join PERSON as P
              on R.PERSON_ID = P.PERSON_ID
         join COUNTRY as C
              on C.NAME = T.COUNTRY;

create or replace view V_RESERVATIONS_COUNT
as
select T.COUNTRY        as COUNTRY,
       count(R.TRIP_ID) as RESERVATIONS
from TRIP as T
         join RESERVATION as R
              on T.TRIP_ID = R.TRIP_ID
where R.STATUS <> 'C'
group by T.COUNTRY;

create or replace view V_TRIPS
as
select C.NAME                                   as COUNTRY,
       T.TRIP_ID                                as TRIP_ID,
       T.TRIP_DATE                              as TRIP_DATE,
       T.NAME                                   as TRIP_NAME,
       T.NO_PLACES                              as NO_PLACES,
       (NO_PLACES - (select RESERVATIONS
                     from V_RESERVATIONS_COUNT as V
                     where V.COUNTRY = C.NAME)) as NO_AVAILABLE_PLACES
from TRIP as T
         join COUNTRY as C
              on C.NAME = T.COUNTRY;

create or replace view V_TRIPS_2
as
select C.NAME                as COUNTRY,
       T.TRIP_ID             as TRIP_ID,
       T.TRIP_DATE           as TRIP_DATE,
       T.NAME                as TRIP_NAME,
       T.NO_PLACES           as NO_PLACES,
       T.NO_AVAILABLE_PLACES as NO_AVAILABLE_PLACES
from TRIP as T
         join COUNTRY as C
              on C.NAME = T.COUNTRY;

create or replace view V_AVAILABLE_TRIPS
as
select *
from V_TRIPS
where (
                  NO_AVAILABLE_PLACES > 0
              and TRIP_DATE > current_date
          );

CREATE TYPE TRIP_PARTICIPANT AS
(
    country_name   VARCHAR(25),
    trip_date      DATE,
    trip_name      VARCHAR(50),
    first_name     VARCHAR(25),
    last_name      VARCHAR(25),
    reservation_id INT,
    status         CHAR(1)
);

CREATE OR REPLACE FUNCTION TRIP_PARTICIPANTS(VAR_TRIP_ID INT)
    RETURNS SETOF TRIP_PARTICIPANT
    LANGUAGE 'plpgsql' AS
$$
DECLARE
    valid       int;
    participant TRIP_PARTICIPANT;
BEGIN
    SELECT COUNT(*)
    INTO valid
    FROM trip t
    WHERE t.TRIP_ID = VAR_TRIP_ID;
    IF
        valid = 0 THEN
        RAISE EXCEPTION 'Invalid trip_id';
    END IF;

    FOR participant IN
        SELECT *
        FROM RESERVATION r
                 JOIN V_RESERVATIONS vr on r.RESERVATION_ID = vr.RESERVATION_ID
                 JOIN TRIP t on t.TRIP_ID = r.TRIP_ID
                 JOIN COUNTRY C on t.NAME = C.NAME
        WHERE r.TRIP_ID = VAR_TRIP_ID
        LOOP
            RETURN NEXT (participant.country_name,
                         participant.trip_date,
                         participant.trip_name,
                         participant.first_name,
                         participant.last_name,
                         participant.reservation_id,
                         participant.status);
        END LOOP;
END;
$$;

CREATE TYPE PERSON_RESERVATION AS
(
    country_name   VARCHAR(25),
    trip_date      DATE,
    trip_name      VARCHAR(50),
    first_name     VARCHAR(25),
    last_name      VARCHAR(25),
    reservation_id INT,
    status         CHAR(1)
);

CREATE OR REPLACE FUNCTION PERSON_RESERVATIONS(VAR_PERSON_ID INT)
    RETURNS SETOF TRIP_PARTICIPANT
    LANGUAGE 'plpgsql' AS
$$
DECLARE
    valid  int;
    person PERSON_RESERVATION;
BEGIN
    SELECT COUNT(*)
    INTO valid
    FROM PERSON p
    WHERE p.PERSON_ID = VAR_PERSON_ID;
    IF
        valid = 0 THEN
        RAISE EXCEPTION 'Invalid person_id';
    END IF;

    FOR person IN (SELECT *
                   FROM RESERVATION r
                            JOIN PERSON p on p.PERSON_ID = r.PERSON_ID
                            JOIN TRIP t on t.TRIP_ID = r.TRIP_ID
                            JOIN COUNTRY c on t.NAME = c.NAME)
        LOOP
            RETURN NEXT (
                         person.country_name,
                         person.trip_date,
                         person.trip_name,
                         person.first_name,
                         person.last_name,
                         person.reservation_id,
                         person.status
                );
        END LOOP;
END;
$$;

CREATE TYPE AVAILABLE_TRIP AS
(
    country_name        VARCHAR(25),
    trip_date           DATE,
    trip_name           VARCHAR(50),
    no_available_places INT
);

CREATE OR REPLACE FUNCTION AVAILABLE_TRIPS(VAR_COUNTRY_NAME VARCHAR(50), VAR_DATE_FROM DATE, VAR_DATE_TO DATE)
    RETURNS SETOF AVAILABLE_TRIP
    LANGUAGE 'plpgsql' AS
$$
DECLARE
    trips_table AVAILABLE_TRIP;
    var_number  int;
BEGIN
    SELECT COUNT(*)
    INTO var_number
    FROM V_TRIPS t
    WHERE t.NO_AVAILABLE_PLACES > 0
      AND VAR_DATE_FROM < t.TRIP_DATE
      AND VAR_DATE_TO > t.TRIP_DATE
      AND VAR_COUNTRY_NAME = t.COUNTRY;

    IF
        var_number = 0 THEN
        RAISE EXCEPTION 'No trips found';
    END IF;

    FOR trips_table IN (SELECT *
                        FROM V_TRIPS vt
                        WHERE vt.COUNTRY = VAR_COUNTRY_NAME)
        LOOP
            RETURN NEXT (
                         trips_table.country_name,
                         trips_table.trip_date,
                         trips_table.trip_name,
                         trips_table.no_available_places
                );
        END LOOP;
END;
$$;

CREATE OR REPLACE PROCEDURE ADD_RESERVATION(VAR_TRIP_ID INT, VAR_PERSON_ID INT)
    LANGUAGE 'plpgsql' AS
$$
DECLARE
    valid_person       INT;
    valid_trip         INT;
    new_reservation_id INT;
BEGIN
    SELECT COUNT(*)
    INTO valid_person
    FROM PERSON p
    WHERE VAR_PERSON_ID = p.PERSON_ID;
    IF
        VALID_PERSON != 1
    THEN
        RAISE EXCEPTION 'Invalid person';
    END IF;

    SELECT COUNT(*)
    INTO valid_trip
    FROM V_TRIPS vt
    WHERE VAR_TRIP_ID = vt.TRIP_ID
      AND vt.NO_AVAILABLE_PLACES > 0
      AND vt.TRIP_DATE > CURRENT_DATE;
    IF
        valid_trip != 1
    THEN
        RAISE EXCEPTION 'Invalid trip';
    END IF;

    INSERT INTO RESERVATION(TRIP_ID, PERSON_ID, STATUS)
    VALUES (VAR_TRIP_ID,
            VAR_PERSON_ID,
            'N')
    RETURNING RESERVATION_ID
        INTO NEW_RESERVATION_ID;

    INSERT INTO RESERVATION_LOG (RESERVATION_ID, CHANGE_DATE, STATUS)
    VALUES (NEW_RESERVATION_ID, CURRENT_DATE, 'N');
END;
$$;

CREATE OR REPLACE PROCEDURE MODIFY_RESERVATION_STATUS(VAR_RESERVATION_ID INT, VAR_STATUS INT)
    LANGUAGE 'plpgsql' AS
$$
DECLARE
    valid_reservation_id int;
    available_places     int;
BEGIN
    IF
                VAR_STATUS != 'N'
            AND VAR_STATUS != 'C'
            AND VAR_STATUS != 'P' THEN
        RAISE EXCEPTION 'Invalid status; status must be either NEW (N), PAID (P) or CANCELED (C)';
    END IF;

    SELECT COUNT(*)
    INTO VALID_RESERVATION_ID
    FROM V_RESERVATIONS r
    WHERE VAR_RESERVATION_ID = r.RESERVATION_ID;

    IF
        VALID_RESERVATION_ID != 1
    THEN
        RAISE EXCEPTION 'Invalid reservation_id';
    END IF;

    SELECT NO_AVAILABLE_PLACES
    INTO available_places
    FROM V_TRIPS t
    WHERE t.TRIP_ID =
          (SELECT TRIP_ID
           FROM RESERVATION r
           WHERE r.RESERVATION_ID = VAR_RESERVATION_ID);

    IF
                available_places < 1
            AND VAR_STATUS = 'N'
            AND VAR_STATUS = 'P'
    THEN
        RAISE EXCEPTION 'No places are available for that trip';
    END IF;

    UPDATE RESERVATION r
    SET STATUS = VAR_STATUS
    WHERE r.RESERVATION_ID = VAR_RESERVATION_ID;

    INSERT INTO RESERVATION_LOG (RESERVATION_ID, CHANGE_DATE, STATUS)
    VALUES (VAR_RESERVATION_ID,
            CURRENT_DATE,
            VAR_STATUS);
END;
$$;

CREATE OR REPLACE PROCEDURE MODIFY_NO_PLACES(VAR_TRIP_ID INT, VAR_NEW_NO_PLACES INT)
    LANGUAGE 'plpgsql' AS
$$
DECLARE
    valid_trip            int;
    existing_reservations int;
BEGIN

    SELECT COUNT(*)
    INTO valid_trip
    FROM TRIP t
    WHERE t.TRIP_ID = VAR_TRIP_ID;

    IF
        valid_trip != 1 THEN
        RAISE EXCEPTION 'Invalid trip_id';
    END IF;

    SELECT COUNT(*)
    INTO existing_reservations
    FROM RESERVATION r
    WHERE r.TRIP_ID = VAR_TRIP_ID
      AND r.STATUS IN ('P', 'N');

    IF
        EXISTING_RESERVATIONS > VAR_NEW_NO_PLACES
    THEN
        RAISE EXCEPTION 'Places for existing reservations can not be changed';
    END IF;

    UPDATE TRIP t
    SET NO_PLACES = VAR_NEW_NO_PLACES
    WHERE t.TRIP_ID = VAR_TRIP_ID;
END;
$$;

CREATE OR REPLACE PROCEDURE COUNT_NO_PLACES(VAR_TRIP_ID INT, VAR_COUNTRY VARCHAR(50))
    LANGUAGE 'plpgsql' AS
$$
DECLARE
    no_places int;
    trip      TRIP;
BEGIN
    FOR trip IN (SELECT * FROM TRIP)
        LOOP
            SELECT v.RESERVATIONS
            INTO NO_PLACES
            FROM V_RESERVATIONS_COUNT v
            WHERE v.COUNTRY = VAR_COUNTRY;

            UPDATE trip
            SET trip.NO_AVAILABLE_PLACES = NO_PLACES
            WHERE trip.TRIP_ID = VAR_TRIP_ID;
        END LOOP;
END;
$$;
